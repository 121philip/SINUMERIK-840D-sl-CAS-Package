//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  A:\OneDrive - KU Leuven\Master\Master Thesis\Kaixi's Work\CS_Works\Sinutrain\Sinutrain.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: 31667
//              Version: NX 2312
//              Date: 05-01-2025  (Format: mm-dd-yyyy)
//              Time: 14:34 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using NXOpen;
using NXOpen.BlockStyler;
using System.Reflection;

//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class Sinutrain
{
    //class members
    private static Session theSession = null;
    private static UI theUI = null;
    private string theDlxFileName;
    private NXOpen.BlockStyler.BlockDialog theDialog;
    private NXOpen.BlockStyler.FileSelection F1;// Block type: NativeFileBrowser
    private NXOpen.BlockStyler.FileSelection F2;// Block type: NativeFileBrowser
    private NXOpen.BlockStyler.Group group;// Block type: Group
    private NXOpen.BlockStyler.StringBlock WN;// Block type: String
    private NXOpen.BlockStyler.FileSelection F3;// Block type: NativeFileBrowser
    private NXOpen.BlockStyler.Button ButtonRWO;// Block type: Button
    
    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public Sinutrain()
    {
        try
        {
            theSession = Session.GetSession();
            theUI = UI.GetUI();
            theDlxFileName = "C:\\Users\\rohan\\OneDrive - KU Leuven\\Master Thesis\\Important files\\CAS Packages\\Plan B\\Import Machine Data.dlx";
            theDialog = theUI.CreateDialog(theDlxFileName);
            theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
            theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
            theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
            theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            throw ex;
        }
    }
    //------------------------------- DIALOG LAUNCHING ---------------------------------
    //
    //    Before invoking this application one needs to open any part/empty part in NX
    //    because of the behavior of the blocks.
    //
    //    Make sure the dlx file is in one of the following locations:
    //        1.) From where NX session is launched
    //        2.) $UGII_USER_DIR/application
    //        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    //            recommended. This variable is set to a full directory path to a file 
    //            containing a list of root directories for all custom applications.
    //            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
    //
    //    You can create the dialog using one of the following way:
    //
    //    1. Journal Replay
    //
    //        1) Replay this file through Tool->Journal->Play Menu.
    //
    //    2. USER EXIT
    //
    //        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    //        2) Invoke the Shared Library through File->Execute->NX Open menu.
    //
    //------------------------------------------------------------------------------
    public static void Main()
    {
        Sinutrain theSinutrain = null;
        try
        {
            theSinutrain = new Sinutrain();
            // The following method shows the dialog immediately
            theSinutrain.Launch();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            if(theSinutrain != null)
                theSinutrain.Dispose();
                theSinutrain = null;
        }
    }
    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    //
    //
    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    //
    //
    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
     public static int GetUnloadOption(string arg)
    {
        //return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
         return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
        // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
    }
    
    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    public static void UnloadLibrary(string arg)
    {
        try
        {
            //---- Enter your code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //This method launches the dialog to screen
    //------------------------------------------------------------------------------
    public NXOpen.BlockStyler.BlockDialog.DialogResponse Launch()
    {
        NXOpen.BlockStyler.BlockDialog.DialogResponse dialogResponse = NXOpen.BlockStyler.BlockDialog.DialogResponse.Invalid;
        try
        {
            dialogResponse = theDialog.Launch();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return dialogResponse;
    }
    
    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        if(theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }
    
    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    public void initialize_cb()
    {
        try
        {
            F1 = (NXOpen.BlockStyler.FileSelection)theDialog.TopBlock.FindBlock("F1");
            F2 = (NXOpen.BlockStyler.FileSelection)theDialog.TopBlock.FindBlock("F2");
            group = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group");
            WN = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("WN");
            F3 = (NXOpen.BlockStyler.FileSelection)theDialog.TopBlock.FindBlock("F3");
            ButtonRWO = (NXOpen.BlockStyler.Button)theDialog.TopBlock.FindBlock("ButtonRWO");
            //------------------------------------------------------------------------------
            //Registration of StringBlock specific callbacks
            //------------------------------------------------------------------------------
            //WN.SetKeystrokeCallback(new NXOpen.BlockStyler.StringBlock.KeystrokeCallback(KeystrokeCallback));

            //------------------------------------------------------------------------------
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    public void dialogShown_cb()
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }

    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    public int apply_cb()
    {
        int errorCode = 0;
        NXOpen.Part workPart = theSession.Parts.Work;
        NXOpen.Part displayPart = theSession.Parts.Display;
        try
        {
            //---- Enter your callback code here -----

            // Handle NC Program (F1)
            if (F1.GetProperties().GetString("Path") != "")
            {
                // Get the selected file from FileSelection block
                NXOpen.BlockStyler.PropertyList plistF1 = F1.GetProperties();
                string selectedFilePath = plistF1.GetString("Path");

                // Ensure a file was selected
                if (string.IsNullOrEmpty(selectedFilePath))
                {
                    theUI.NXMessageBox.Show("Error", NXMessageBox.DialogType.Error, "Please select a valid file.");
                    return 1;
                }

                NXOpen.SIM.KinematicConfigurator kinematicConfigurator1;
                kinematicConfigurator1 = workPart.KinematicConfigurator;

                NXOpen.SIM.NcChannelSelectionData ncChannelSelectionData1;
                ncChannelSelectionData1 = kinematicConfigurator1.CreateNcChannelSelectionData();

                NXOpen.SIM.NcProgramManagerBuilder ncProgramManagerBuilder1;
                ncProgramManagerBuilder1 = kinematicConfigurator1.CreateNcProgramManagerBuilder();

                NXOpen.SIM.NcProgramSource ncProgramSource1;
                ncProgramSource1 = ncProgramManagerBuilder1.GetExternalFileSource();

                ncProgramManagerBuilder1.Destroy();

                NXOpen.SIM.NcProgram ncProgram1;
                ncProgram1 = ncProgramSource1.AddMainProgram("Main", selectedFilePath);

                ncChannelSelectionData1.AssignProgram("Main", ncProgram1);

                NXOpen.SIM.IsvControlPanelBuilder isvControlPanelBuilder1;
                isvControlPanelBuilder1 = kinematicConfigurator1.CreateIsvControlPanelBuilder(NXOpen.SIM.IsvControlPanelBuilder.VisualizationType.MachineCodeSimulateCse, ncChannelSelectionData1);
            }

            // Handle Tool Data (F2)
            if (F2.GetProperties().GetString("Path") != "")
            {
                string toolDataPath = F2.GetProperties().GetString("Path");
                if (!string.IsNullOrEmpty(toolDataPath))
                {
                    // Dynamically load assemblies.
                    try
                    {
                        Assembly assembly = Assembly.LoadFrom("C:\\Users\\rohan\\OneDrive - KU Leuven\\Master Thesis\\Important files\\CAS Packages\\Plan B\\ImportToolData.dll");

                        Type type = assembly.GetType("Program");
                        object instance = Activator.CreateInstance(type);
                        MethodInfo method = type.GetMethod("ImportTools");
                        if (method != null)
                        {
                            try
                            {
                                method.Invoke(instance, new object[] { toolDataPath });
                            }
                            catch (TargetInvocationException tiex)
                            {
                                // Output the information of InnerException.
                                theUI.NXMessageBox.Show("Error", NXMessageBox.DialogType.Error, "调用 ImportTools 方法时发生异常: " + tiex.InnerException.Message);
                            }
                        }
                        else
                        {
                            theUI.NXMessageBox.Show("Error", NXMessageBox.DialogType.Error, "ImportTools 方法在程序集中未找到。");
                        }
                    }
                    catch (Exception ex)
                    {
                        theUI.NXMessageBox.Show("Error", NXMessageBox.DialogType.Error, "Failed to load the assembly: " + ex.Message);
                    }
                }
                else
                {
                    theUI.NXMessageBox.Show("Error", NXMessageBox.DialogType.Error, "Tool Data file not found.");
                }
            }

            // Handle Work Offset (F3)
            if (F3.GetProperties().GetString("Path") != "")
            {
                string workOffsetPath = F3.GetProperties().GetString("Path");
                string workpieceName = WN.Value; // Retrieve workpiece name from WN field

                if (!string.IsNullOrEmpty(workOffsetPath))
                {
                    try
                    {
                        Assembly offsetAssembly = Assembly.LoadFrom(
                            "C:\\Users\\rohan\\OneDrive - KU Leuven\\Master Thesis\\Important files\\CAS Packages\\Plan B\\ImportWorkOffset.dll"
                        );

                        Type offsetType = offsetAssembly.GetType("Program");
                        object offsetInstance = Activator.CreateInstance(offsetType);
                        MethodInfo offsetMethod = offsetType.GetMethod("ImportWorkOffset");

                        if (offsetMethod != null)
                        {
                            // Pass both workOffsetPath and workpieceName as parameters
                            offsetMethod.Invoke(offsetInstance, new object[] { workOffsetPath, workpieceName });
                        }
                        else
                        {
                            theUI.NXMessageBox.Show("Error", NXMessageBox.DialogType.Error,
                                "ImportWorkOffset method not found in DLL");
                        }
                    }
                    catch (Exception ex)
                    {
                        theUI.NXMessageBox.Show("Work Offset Error", NXMessageBox.DialogType.Error, "Failed to import work offset: " + ex.Message);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }

    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    public int update_cb( NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            if(block == F1)
            {
            //---------Enter your code here-----------
            }
            else if(block == F2)
            {
            //---------Enter your code here-----------
            }
            else if(block == WN)
            {
            //---------Enter your code here-----------
            }
            else if(block == F3)
            {
            //---------Enter your code here-----------
            }
            else if(block == ButtonRWO)
            {
                theUI.NXMessageBox.Show("Debug", NXMessageBox.DialogType.Information, "Reset button clicked!");
                ResetButton_Click();
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
            errorCode = apply_cb();
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    //------------------------------------------------------------------------------
    //StringBlock specific callbacks
    //------------------------------------------------------------------------------
    //public int KeystrokeCallback(NXOpen.BlockStyler.StringBlock string_block, string uncommitted_value)
    //{
    //}
    
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Function Name: GetBlockProperties
    //Returns the propertylist of the specified BlockID
    //------------------------------------------------------------------------------
    public PropertyList GetBlockProperties(string blockID)
    {
        PropertyList plist =null;
        try
        {
            plist = theDialog.GetBlockProperties(blockID);
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return plist;
    }
    
    // Action button - Reset Work Offset
    private void ResetButton_Click()
    {
        try
        {
            //string workpieceName = WN.Value;
            Assembly resetAssembly = Assembly.LoadFrom(
                "C:\\Users\\rohan\\OneDrive - KU Leuven\\Master Thesis\\Important files\\CAS Packages\\Plan B\\ImportWorkOffset.dll"
            );

            Type resetType = resetAssembly.GetType("Program");
            if (resetType == null)
            {
                theUI.NXMessageBox.Show("Error", NXMessageBox.DialogType.Error, "Class 'Program' not found in DLL.");
                return;
            }

            MethodInfo resetMethod = resetType.GetMethod("ResetOriginalPosition");
            if (resetMethod == null)
            {
                theUI.NXMessageBox.Show("Error", NXMessageBox.DialogType.Error, "Method 'ResetOriginalPosition' not found.");
                return;
            }

            object resetInstance = Activator.CreateInstance(resetType);
            //resetMethod.Invoke(resetInstance, new object[] { workpieceName });
            resetMethod.Invoke(resetInstance, null);
            theUI.NXMessageBox.Show("Success", NXMessageBox.DialogType.Information, "Reset completed!"); // 成功提示
        }
        catch(Exception ex)
        {
            theUI.NXMessageBox.Show("Reset Error", NXMessageBox.DialogType.Error, ex.Message);
        }
    }
}
